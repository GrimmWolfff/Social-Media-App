//! CREATE LOADER AND MAKE PAGE TRANSITIONS SMOOTH
//! CHANGE ROUTER.PUSH WITH NEXT/LINK
//!TODO: Fade Effect
//!TODO: Optimized user profiles
//!TODO: Like / Comment Features
//!TODO: Uploading images by using choose file method
//* Edit Post feature
//* Optimized form
//* See exact post with (url/:id)
//* Delete post method
//* Profile Page
//* Navbar / Header / Footer pages
//* Debug nextauth_url warning 

import React from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { getSession, useSession } from 'next-auth/react';
import Post from '../Components/Post';
import { connectToDatabase } from '../utils/mongodb';
import Navbar from '../Components/Navbar';
import Footer from '../Components/Footer';
import Form from '../Components/form';

export default function Index({ posts }) {
  const router = useRouter();
  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      router.push('/home');
    }
  });

  return (
      <div>
        <Head>
          <title>Memegram</title>
          <meta name="description" content="Generated by create next app" />
        </Head>
        <div className="w-full min-h-screen">
          <Navbar />
          <div className="flexbox h-full w-full h-auto">
            <Form />
            {posts.map((p, idx) => (
              <Post key={idx} id={p._id} post={p.post} avatar={p.userImg} createdAt={p.createdAt} author={p.author} />
            ))}
          </div>
          <Footer />
        </div>
      </div>
    );
}

export async function getServerSideProps(context) {
  const { db } = await connectToDatabase();
  const posts = await db.collection("posts").find().sort({ timestamp: -1 }).toArray();
  
  const session = await getSession(context);
  if(!session) {
    return {
      permanent: false,
      destination: '/home'
    }
  }
  return { props: {
    session,
    posts: posts.map((post) => ({
      _id: post._id.toString(),
      author: post.author,
      post: post.post,
      userImg: post.userImg,
      createdAt: post.createdAt,
    })),
  } }
}